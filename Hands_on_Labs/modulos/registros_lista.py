import json

    #Carga la lista de veh√≠culos desde un archivo JSON llamado 'vehiculos.json'.
    
    #Returns: 
    # list: Una lista de veh√≠culos si el archivo existe, o una lista vac√≠a si no se encuentra el archivo.
    
def cargar_vehiculos():
    try:
        with open("vehiculos.json", "r") as file:
            return json.load(file)  #cargar y devolver los datos desde el archivo json
    except FileNotFoundError:
        return []    #retornar una lista vacia si el archivo no existe

def guardar_vehiculos(vehiculos):
    
   
    #Guarda la lista de veh√≠culos en un archivo json llamado 'vehiculos.json'.
    
    #Args:
        #vehiculos (list): La lista de veh√≠culos a guardar en el archivo.
    

    with open("vehiculos.json", "w") as file:
        json.dump(vehiculos, file, indent=4)  #guarda la sangria con 4 espacios

def validaciones_codigos(codigo):

    #Valida que el c√≥digo del veh√≠culo sea un n√∫mero positivo.
    #Args:
        #codigo (str): El c√≥digo del veh√≠culo como cadena de texto.
    #Returns:
        #bool: True si el c√≥digo es v√°lido, False en caso contrario.

    try:
        codigo_num = int(codigo) #Intentar convertir el c√≥digo a un entero
        if codigo_num < 0:
            print('\n (‚ùå) No se permiten c√≥digos negativos.')
            return False
        return True
    except ValueError:
        print('\n (‚ùå) El c√≥digo debe contener solo n√∫meros.')
        return False
    
def registrar_vehiculo():

    #Registra un nuevo veh√≠culo solicitando al usuario el c√≥digo, marca, modelo y a√±o.
    #Realiza validaciones y guarda el veh√≠culo si es v√°lido y √∫nico.
    
    codigo=input("\n ‚ûî Ingrese el cÕüoÕüdÕüiÕügÕüoÕü del veh√≠culo ( üè∑Ô∏è ) : ")
    if not validaciones_codigos(codigo):
        return                  # Salir si el c√≥digo no es v√°lido
    marca=input("\n ‚ûî Ingrese la mÕüaÕürÕücÕüaÕü del veh√≠culo ( üì¶ ) : ")
    modelo=input("\n ‚ûî Ingrese el mÕüoÕüdÕüeÕülÕüoÕü del veh√≠culo ( üõí ) : ")
    
    try:
        print("\n ‚ûî Ingrese el a√±o de lanzamiento del veh√≠culo ( üóìÔ∏è ) : ")
        anio = int(input())     # Intentar convertir el a√±o a un n√∫mero entero
    except ValueError:
        print("\n (‚ùå) El a√±o debe ser un n√∫mero entero.")
        return

    vehiculos = cargar_vehiculos()
   
    # Verificar si ya existe un veh√≠culo con el mismo c√≥digo
    for v in vehiculos:
        if v["codigo"] == codigo:
            print("\n (‚ùå) Ya existe un veh√≠culo con ese c√≥digo")
            return
    # Crear un diccionario con los datos del veh√≠culo y guardarlo
    vehiculo = {
        "codigo": codigo,
        "marca": marca,
        "modelo": modelo,
        "anio": anio
    }

    vehiculos.append(vehiculo)
    guardar_vehiculos(vehiculos)
    print("\n ( ‚úîÔ∏è ) Veh√≠culo registrado exitosamente.")

def listar_vehiculos():
    
    #Lista todos los veh√≠culos registrados y guarda la lista en un archivo de texto
    #si no hay veh√≠culos, muestra un mensaje indic√°ndolo.
    
    vehiculos = cargar_vehiculos()
    if not vehiculos:
        print("\n (‚ùå) No hay veh√≠culos registrados.")
    else:
        print("\n--- Veh√≠culos en exhibici√≥n ---")# Imprimir los detalles de cada veh√≠culo
        for v in vehiculos:
            print("\n           ÔπîüöñÔπíinfo Ôπó")
            print(f"cÕüoÕüdÕüiÕügÕüoÕü: {v['codigo']}, mÕüaÕürÕücÕüaÕü: {v['marca']}, mÕüoÕüdÕüeÕülÕüoÕü: {v['modelo']}, üïë A√±o: {v['anio']}")

    # Guardar el listado en un archivo
    with open("listado_vehiculos.txt", "w") as file:
        for v in vehiculos:
            print("\n           ÔπîüöñÔπíinfo Ôπó")
            file.write(f"cÕüoÕüdÕüiÕügÕüoÕü: {v['codigo']}, mÕüaÕürÕücÕüaÕü: {v['marca']}, mÕüoÕüdÕüeÕülÕüoÕü: {v['modelo']}, üïë A√±o: {v['anio']}\n")
    print("\n ( ‚úîÔ∏è ) Listado guardado exitosamente ")
